{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport { initializeApp } from 'firebase/app'; // import 'firebase/compat/firestore'\n\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDg4Q02V7zobEM42lxq-0KptOTkN6AP_Hs\",\n  authDomain: \"crwn-db-db7c0.firebaseapp.com\",\n  projectId: \"crwn-db-db7c0\",\n  storageBucket: \"crwn-db-db7c0.appspot.com\",\n  messagingSenderId: \"203620665203\",\n  appId: \"1:203620665203:web:66d41389531a76cc7c6706\",\n  measurementId: \"G-KTM87MHW69\"\n};\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(); // export const firestore = firebase.firestore();\n\nexport const firestore = getFirestore(app);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const docRef = doc(firestore, \"users\", userAuth.uid); // console.log(docRef);\n\n  const docSnap = await getDoc(docRef); // console.log(docSnap);\n\n  if (docSnap.exists()) {\n    console.log(docRef);\n    console.log(\"Document data:\", docSnap.data());\n  } else {\n    const {\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(docRef, {\n        // displayName: displayName,\n        email: email,\n        createdAt: createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    } // console.log(\"No such document!\");\n\n  }\n\n  return docRef;\n};\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // export const signInWithGoogle = () => firebase.auth().signInWithPopUp(provider);\n\nexport const signInWithGoogle = () => signInWithPopup(auth, provider).then(result => {// // This gives you a Google Access Token. You can use it to access the Google API.\n  // const credential = GoogleAuthProvider.credentialFromResult(result);\n  // const token = credential.accessToken;\n  // // The signed-in user info.\n  // const user = result.user;\n  // // ...\n}).catch(error => {// // Handle Errors here.\n  // const errorCode = error.code;\n  // const errorMessage = error.message;\n  // // The email of the user's account used.\n  // const email = error.email;\n  // // The AuthCredential type that was used.\n  // const credential = GoogleAuthProvider.credentialFromError(error);\n  // // ...\n});\nexport default firebase;","map":{"version":3,"sources":["D:/Programming/Web/node/react-101/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","initializeApp","getFirestore","doc","getDoc","setDoc","getAuth","signInWithPopup","GoogleAuthProvider","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","firestore","createUserProfileDocument","userAuth","additionalData","docRef","uid","docSnap","exists","console","log","data","email","createdAt","Date","error","message","provider","setCustomParameters","prompt","signInWithGoogle","then","result","catch"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,SAASC,aAAT,QAA8B,cAA9B,C,CACA;;AACA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,+BAFO;AAGnBC,EAAAA,SAAS,EAAE,eAHQ;AAInBC,EAAAA,aAAa,EAAE,2BAJI;AAKnBC,EAAAA,iBAAiB,EAAE,cALA;AAMnBC,EAAAA,KAAK,EAAE,2CANY;AAOnBC,EAAAA,aAAa,EAAE;AAPI,CAAvB;AAUA,MAAMC,GAAG,GAAGhB,aAAa,CAACQ,cAAD,CAAzB;AAEA,OAAO,MAAMS,IAAI,GAAGZ,OAAO,EAApB,C,CACP;;AACA,OAAO,MAAMa,SAAS,GAAGjB,YAAY,CAACe,GAAD,CAA9B;AAEP,OAAO,MAAMG,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;AACxE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,MAAM,GAAGpB,GAAG,CAACgB,SAAD,EAAY,OAAZ,EAAoBE,QAAQ,CAACG,GAA7B,CAAlB,CAHwE,CAIxE;;AACA,QAAMC,OAAO,GAAG,MAAMrB,MAAM,CAACmB,MAAD,CAA5B,CALwE,CAMxE;;AACA,MAAIE,OAAO,CAACC,MAAR,EAAJ,EAAsB;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,OAAO,CAACI,IAAR,EAA9B;AACH,GAHD,MAGO;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAYT,QAAlB;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAM3B,MAAM,CAACkB,MAAD,EAAS;AACjB;AACAO,QAAAA,KAAK,EAAEA,KAFU;AAGjBC,QAAAA,SAAS,EAAEA,SAHM;AAIjB,WAAGT;AAJc,OAAT,CAAZ;AAMH,KAPD,CAOE,OAAOW,KAAP,EAAc;AACZN,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCK,KAAK,CAACC,OAAzC;AACH,KAbE,CAcH;;AACH;;AAED,SAAOX,MAAP;AACH,CA5BM;AA8BP,MAAMY,QAAQ,GAAG,IAAI3B,kBAAJ,EAAjB;AACA2B,QAAQ,CAACC,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAO/B,eAAe,CAACW,IAAD,EAAOiB,QAAP,CAAf,CAClCI,IADkC,CAC5BC,MAAD,IAAY,CACd;AACA;AACA;AACA;AACA;AACA;AACH,CARkC,EAQhCC,KARgC,CAQzBR,KAAD,IAAW,CAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAjBkC,CAAhC;AAoBP,eAAejC,QAAf","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport { initializeApp } from 'firebase/app';\r\n// import 'firebase/compat/firestore'\r\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDg4Q02V7zobEM42lxq-0KptOTkN6AP_Hs\",\r\n    authDomain: \"crwn-db-db7c0.firebaseapp.com\",\r\n    projectId: \"crwn-db-db7c0\",\r\n    storageBucket: \"crwn-db-db7c0.appspot.com\",\r\n    messagingSenderId: \"203620665203\",\r\n    appId: \"1:203620665203:web:66d41389531a76cc7c6706\",\r\n    measurementId: \"G-KTM87MHW69\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth();\r\n// export const firestore = firebase.firestore();\r\nexport const firestore = getFirestore(app);\r\n\r\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    const docRef = doc(firestore, \"users\",userAuth.uid);\r\n    // console.log(docRef);\r\n    const docSnap = await getDoc(docRef);\r\n    // console.log(docSnap);\r\n    if (docSnap.exists()) {\r\n        console.log(docRef);\r\n        console.log(\"Document data:\", docSnap.data());\r\n    } else {\r\n        const { email } = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try {\r\n            await setDoc(docRef, {\r\n                // displayName: displayName,\r\n                email: email,\r\n                createdAt: createdAt,\r\n                ...additionalData\r\n            });\r\n        } catch (error) {\r\n            console.log('error creating user', error.message);\r\n        }\r\n        // console.log(\"No such document!\");\r\n    }\r\n    \r\n    return docRef;\r\n}\r\n\r\nconst provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\n// export const signInWithGoogle = () => firebase.auth().signInWithPopUp(provider);\r\n\r\nexport const signInWithGoogle = () => (signInWithPopup(auth, provider)\r\n    .then((result) => {\r\n        // // This gives you a Google Access Token. You can use it to access the Google API.\r\n        // const credential = GoogleAuthProvider.credentialFromResult(result);\r\n        // const token = credential.accessToken;\r\n        // // The signed-in user info.\r\n        // const user = result.user;\r\n        // // ...\r\n    }).catch((error) => {\r\n        // // Handle Errors here.\r\n        // const errorCode = error.code;\r\n        // const errorMessage = error.message;\r\n        // // The email of the user's account used.\r\n        // const email = error.email;\r\n        // // The AuthCredential type that was used.\r\n        // const credential = GoogleAuthProvider.credentialFromError(error);\r\n        // // ...\r\n    })\r\n);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}