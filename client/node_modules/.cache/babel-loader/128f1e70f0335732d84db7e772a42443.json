{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\Web\\\\node\\\\react-101\\\\crwn-clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { Outlet, Route, Routes } from 'react-router-dom';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.action';\nimport { selectIsCollectionsFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selector'; // import { collection, onSnapshot } from 'firebase/firestore';\n// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n// import CollectionPage from '../collection/collection.component';\n// import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\n\nimport CollectionPageContainer from '../collection/collection.container';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPage from '../collection/collection.component'; // const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsPageWithSpinner = WithSpinner(CollectionPage);\n_c = CollectionsPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  // state = {\n  //     loading: true\n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync(); // const { updateCollections } = this.props;\n    // const collectionRef = collection(firestore, 'collections');\n    // using API\n    // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-db7c0/databases/(default)/documents/collections')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections))\n    // using firestore\n    // collectionRef.get().then( snapShot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    // using observer\n    // onSnapshot( collectionRef, async (snapShot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n  }\n\n  render() {\n    // const { loading } = this.state;\n    // const { isCollectionsFetching, isCollectionsLoaded } = this.props\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: `/*`,\n          element: /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 49\n          }, this),\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: `/`,\n            element: /*#__PURE__*/_jsxDEV(CollectionsOverviewContainer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: `:collectionId`,\n            element: /*#__PURE__*/_jsxDEV(CollectionPageContainer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 65\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()) // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n\n});\n\nexport default connect(mapDispatchToProps)(ShopPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"CollectionsPageWithSpinner\");","map":{"version":3,"sources":["D:/Programming/Web/node/react-101/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","connect","createStructuredSelector","Outlet","Route","Routes","fetchCollectionsStartAsync","selectIsCollectionsFetching","selectIsCollectionsLoaded","CollectionPageContainer","WithSpinner","CollectionsOverviewContainer","CollectionPage","CollectionsPageWithSpinner","ShopPage","Component","componentDidMount","props","render","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,QAAsC,kBAAtC;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,2BAAT,EAAsCC,yBAAtC,QAAuE,gCAAvE,C,CACA;AACA;AAEA;AACA;;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,cAAP,MAA2B,oCAA3B,C,CAGA;;;AACA,MAAMC,0BAA0B,GAAGH,WAAW,CAACE,cAAD,CAA9C;KAAMC,0B;;AAEN,MAAMC,QAAN,SAAuBd,KAAK,CAACe,SAA7B,CAAuC;AACnC;AACA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEV,MAAAA;AAAF,QAAiC,KAAKW,KAA5C;AAEAX,IAAAA,0BAA0B,GAHV,CAMhB;AACA;AAEJ;AACI;AACA;AACA;AAEJ;AACI;AACA;AAEA;AACA;AACA;AAEJ;AACI;AACA;AAEA;AACA;AACA;AACH;;AAEDY,EAAAA,MAAM,GAAG;AACL;AAEA;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI,QAAC,MAAD;AAAA,+BACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAG,IAAd;AAAmB,UAAA,OAAO,eAAE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBAA5B;AAAA,kCACI,QAAC,KAAD;AAAO,YAAA,IAAI,EAAG,GAAd;AAAkB,YAAA,OAAO,eAAE,QAAC,4BAAD;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,KAAD;AAAO,YAAA,IAAI,EAAG,eAAd;AAA8B,YAAA,OAAO,eAAG,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAxC;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AA1DkC;;AA2DtC;;AAED,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCd,EAAAA,0BAA0B,EAAE,MAAMc,QAAQ,CAACd,0BAA0B,EAA3B,CADN,CAEpC;;AAFoC,CAAL,CAAnC;;AAKA,eAAeL,OAAO,CAACkB,kBAAD,CAAP,CAA4BL,QAA5B,CAAf","sourcesContent":["import React from 'react'\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { Outlet, Route, Routes } from 'react-router-dom';\r\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.action';\r\nimport { selectIsCollectionsFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selector';\r\n// import { collection, onSnapshot } from 'firebase/firestore';\r\n// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\n// import CollectionPage from '../collection/collection.component';\r\n// import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPageContainer from '../collection/collection.container';\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\r\nimport CollectionPage from '../collection/collection.component';\r\n\r\n\r\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionsPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n    // state = {\r\n    //     loading: true\r\n    // };\r\n\r\n    // unsubscribeFromSnapshot = null;\r\n\r\n    componentDidMount() {\r\n        const { fetchCollectionsStartAsync } = this.props;\r\n\r\n        fetchCollectionsStartAsync();\r\n\r\n\r\n        // const { updateCollections } = this.props;\r\n        // const collectionRef = collection(firestore, 'collections');\r\n\r\n    // using API\r\n        // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-db7c0/databases/(default)/documents/collections')\r\n        // .then(response => response.json())\r\n        // .then(collections => console.log(collections))\r\n\r\n    // using firestore\r\n        // collectionRef.get().then( snapShot => {\r\n        //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\r\n\r\n        //     updateCollections(collectionsMap);\r\n        //     this.setState({ loading: false });\r\n        // });\r\n\r\n    // using observer\r\n        // onSnapshot( collectionRef, async (snapShot) => {\r\n        //     const collectionsMap = convertCollectionsSnapshotToMap(snapShot)\r\n\r\n        //     updateCollections(collectionsMap);\r\n        //     this.setState({ loading: false });\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        // const { loading } = this.state;\r\n\r\n        // const { isCollectionsFetching, isCollectionsLoaded } = this.props\r\n\r\n        return (\r\n            <div className=\"shop-page\" >\r\n                <Routes>\r\n                    <Route path={`/*`} element={<Outlet />} >\r\n                        <Route path={`/`} element={<CollectionsOverviewContainer />} />\r\n                        <Route path={`:collectionId`} element={ <CollectionPageContainer /> } />\r\n                    </Route>\r\n                    {/* <Route path={`/*`} element={<Outlet />} >\r\n                        <Route index element={ <CollectionsOverviewWithSpinner isLoading={isCollectionsFetching}/> } />\r\n                        <Route path=':collectionId' element={<CollectionsPageWithSpinner isLoading={!isCollectionsLoaded}/>} />\r\n                    </Route> */}\r\n                </Routes>\r\n                {/* <CollectionsOverviewWithSpinner isLoading={loading} /> */}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\r\n    // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n})\r\n\r\nexport default connect(mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}