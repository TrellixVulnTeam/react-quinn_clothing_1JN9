{"ast":null,"code":"import { signInWithPopup } from \"firebase/auth\";\nimport { onSnapshot } from \"firebase/firestore\";\nimport { channel } from \"redux-saga\";\nimport { takeLatest, put, all, call, take } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { googleSignInFailure, googleSignInSuccess } from \"./user.actions\";\nimport UserActionTypes from \"./user.types\";\nconst snapShotChannel = channel();\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, googleProvider);\n    const userRef = yield call(createUserProfileDocument, user); // const userSnapshot = yield call(onSnapshot, userRef);\n\n    const userSnapshot = onSnapshot(userRef, snapShot => {\n      put(googleSignInSuccess({\n        id: snapShot.id,\n        ...snapShot.data()\n      }));\n      console.log('oke');\n    }); // const channel = yield eventChannel(snapShot => onSnapshot(userRef, (snapShot)))\n\n    console.log(user);\n    console.log(userRef); // console.log(take(channel));\n    // console.log(userSnapshot)\n    // yield put(googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}","map":{"version":3,"sources":["D:/Programming/Web/node/react-101/crwn-clothing/src/redux/user/user.sagas.js"],"names":["signInWithPopup","onSnapshot","channel","takeLatest","put","all","call","take","auth","googleProvider","createUserProfileDocument","googleSignInFailure","googleSignInSuccess","UserActionTypes","snapShotChannel","signInWithGoogle","user","userRef","userSnapshot","snapShot","id","data","console","log","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,eAAT,QAAgC,eAAhC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,gBAAzD;AAGA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,MAAMC,eAAe,GAAGZ,OAAO,EAA/B;AAGA,OAAO,UAAUa,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMhB,eAAe,CAACQ,IAAD,EAAOC,cAAP,CAAtC;AACA,UAAMQ,OAAO,GAAG,MAAMX,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B,CAFA,CAGA;;AACA,UAAME,YAAY,GAAGjB,UAAU,CAAEgB,OAAF,EAAYE,QAAD,IAAc;AACpDf,MAAAA,GAAG,CAACQ,mBAAmB,CAAC;AAAEQ,QAAAA,EAAE,EAAED,QAAQ,CAACC,EAAf;AAAmB,WAAGD,QAAQ,CAACE,IAAT;AAAtB,OAAD,CAApB,CAAH;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH,KAH8B,CAA/B,CAJA,CASA;;AAEAD,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ,EAZA,CAaA;AACA;AACA;AACH,GAhBD,CAgBE,OAAOO,KAAP,EAAc;AACZ,UAAMpB,GAAG,CAACO,mBAAmB,CAACa,KAAD,CAApB,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMtB,UAAU,CAACU,eAAe,CAACa,oBAAjB,EAAuCX,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUY,SAAV,GAAsB;AACzB,QAAMtB,GAAG,CAAC,CACNC,IAAI,CAACmB,mBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { signInWithPopup } from \"firebase/auth\";\r\nimport { onSnapshot } from \"firebase/firestore\";\r\nimport { channel } from \"redux-saga\";\r\nimport { takeLatest, put, all, call, take } from \"redux-saga/effects\";\r\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\r\nimport { googleSignInFailure, googleSignInSuccess } from \"./user.actions\";\r\n\r\n\r\nimport UserActionTypes from \"./user.types\";\r\n\r\nconst snapShotChannel = channel();\r\n\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield signInWithPopup(auth, googleProvider);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        // const userSnapshot = yield call(onSnapshot, userRef);\r\n        const userSnapshot = onSnapshot( userRef, (snapShot) => {\r\n            put(googleSignInSuccess({ id: snapShot.id, ...snapShot.data() }))\r\n            console.log('oke');\r\n        });\r\n\r\n        // const channel = yield eventChannel(snapShot => onSnapshot(userRef, (snapShot)))\r\n\r\n        console.log(user);\r\n        console.log(userRef);\r\n        // console.log(take(channel));\r\n        // console.log(userSnapshot)\r\n        // yield put(googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    } catch (error) {\r\n        yield put(googleSignInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}