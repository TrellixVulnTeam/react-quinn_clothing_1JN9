{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport { initializeApp } from 'firebase/app';\nimport 'firebase/compat/firestore';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore/lite';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDg4Q02V7zobEM42lxq-0KptOTkN6AP_Hs\",\n  authDomain: \"crwn-db-db7c0.firebaseapp.com\",\n  projectId: \"crwn-db-db7c0\",\n  storageBucket: \"crwn-db-db7c0.appspot.com\",\n  messagingSenderId: \"203620665203\",\n  appId: \"1:203620665203:web:66d41389531a76cc7c6706\",\n  measurementId: \"G-KTM87MHW69\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  console.log(firestore.doc('/users/123nonoansda'));\n};\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(); // export const firestore = firebase.firestore();\n\nexport const firestore = getFirestore(app);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // export const signInWithGoogle = () => firebase.auth().signInWithPopUp(provider);\n\nexport const signInWithGoogle = () => signInWithPopup(auth, provider).then(result => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken; // The signed-in user info.\n\n  const user = result.user; // ...\n}).catch(error => {\n  // Handle Errors here.\n  const errorCode = error.code;\n  const errorMessage = error.message; // The email of the user's account used.\n\n  const email = error.email; // The AuthCredential type that was used.\n\n  const credential = GoogleAuthProvider.credentialFromError(error); // ...\n});\nexport default firebase;","map":{"version":3,"sources":["D:/Programming/Web/node/react-101/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","initializeApp","getFirestore","collection","getDocs","getAuth","signInWithPopup","GoogleAuthProvider","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","console","log","firestore","doc","app","auth","provider","setCustomParameters","prompt","signInWithGoogle","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","credentialFromError"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,OAAO,2BAAP;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,OAAnC,QAAkD,yBAAlD;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,+BAFO;AAGnBC,EAAAA,SAAS,EAAE,eAHQ;AAInBC,EAAAA,aAAa,EAAE,2BAJI;AAKnBC,EAAAA,iBAAiB,EAAE,cALA;AAMnBC,EAAAA,KAAK,EAAE,2CANY;AAOnBC,EAAAA,aAAa,EAAE;AAPI,CAAvB;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;AACxE,MAAI,CAACD,QAAL,EAAe;AAEfE,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAS,CAACC,GAAV,CAAc,qBAAd,CAAZ;AACH,CAJM;AAMP,MAAMC,GAAG,GAAGtB,aAAa,CAACO,cAAD,CAAzB;AAEA,OAAO,MAAMgB,IAAI,GAAGnB,OAAO,EAApB,C,CACP;;AACA,OAAO,MAAMgB,SAAS,GAAGnB,YAAY,CAACqB,GAAD,CAA9B;AAEP,MAAME,QAAQ,GAAG,IAAIlB,kBAAJ,EAAjB;AACAkB,QAAQ,CAACC,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAOtB,eAAe,CAACkB,IAAD,EAAOC,QAAP,CAAf,CAClCI,IADkC,CAC5BC,MAAD,IAAY;AACd;AACA,QAAMC,UAAU,GAAGxB,kBAAkB,CAACyB,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,QAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHc,CAId;;AACA,QAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB,CALc,CAMd;AACH,CARkC,EAQhCC,KARgC,CAQzBC,KAAD,IAAW;AAChB;AACA,QAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;AACA,QAAMC,KAAK,GAAGL,KAAK,CAACK,KAApB,CALgB,CAMhB;;AACA,QAAMX,UAAU,GAAGxB,kBAAkB,CAACoC,mBAAnB,CAAuCN,KAAvC,CAAnB,CAPgB,CAQhB;AACH,CAjBkC,CAAhC;AAoBP,eAAerC,QAAf","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport { initializeApp } from 'firebase/app';\r\nimport 'firebase/compat/firestore'\r\nimport { getFirestore, collection, getDocs } from 'firebase/firestore/lite';\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDg4Q02V7zobEM42lxq-0KptOTkN6AP_Hs\",\r\n    authDomain: \"crwn-db-db7c0.firebaseapp.com\",\r\n    projectId: \"crwn-db-db7c0\",\r\n    storageBucket: \"crwn-db-db7c0.appspot.com\",\r\n    messagingSenderId: \"203620665203\",\r\n    appId: \"1:203620665203:web:66d41389531a76cc7c6706\",\r\n    measurementId: \"G-KTM87MHW69\"\r\n};\r\n\r\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    console.log(firestore.doc('/users/123nonoansda'));\r\n}\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth();\r\n// export const firestore = firebase.firestore();\r\nexport const firestore = getFirestore(app);\r\n\r\nconst provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\n// export const signInWithGoogle = () => firebase.auth().signInWithPopUp(provider);\r\n\r\nexport const signInWithGoogle = () => (signInWithPopup(auth, provider)\r\n    .then((result) => {\r\n        // This gives you a Google Access Token. You can use it to access the Google API.\r\n        const credential = GoogleAuthProvider.credentialFromResult(result);\r\n        const token = credential.accessToken;\r\n        // The signed-in user info.\r\n        const user = result.user;\r\n        // ...\r\n    }).catch((error) => {\r\n        // Handle Errors here.\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        // The email of the user's account used.\r\n        const email = error.email;\r\n        // The AuthCredential type that was used.\r\n        const credential = GoogleAuthProvider.credentialFromError(error);\r\n        // ...\r\n    })\r\n);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}