{"ast":null,"code":"import { signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport { getDoc } from \"firebase/firestore\";\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nimport UserActionTypes from \"./user.types\";\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield call(getDoc, userRef);\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield call(getDoc, userRef);\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    } else {\n      const userRef = yield call(createUserProfileDocument, userAuth);\n      const userSnapshot = yield call(getDoc, userRef);\n      yield put(signInSuccess({\n        id: userSnapshot.id,\n        ...userSnapshot.data()\n      }));\n      console.log(userSnapshot.data());\n    }\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}","map":{"version":3,"sources":["D:/Programming/Web/node/react-101/crwn-clothing/src/redux/user/user.sagas.js"],"names":["signInWithEmailAndPassword","signInWithPopup","getDoc","takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","UserActionTypes","signInWithGoogle","user","userRef","userSnapshot","id","data","error","signInWithEmail","payload","email","password","isUserAuthenticated","userAuth","console","log","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"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","sourcesContent":["import { signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\r\nimport { getDoc } from \"firebase/firestore\";\r\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\r\nimport { signInSuccess, signInFailure } from \"./user.actions\";\r\n\r\n\r\nimport UserActionTypes from \"./user.types\";\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield signInWithPopup(auth, googleProvider);\r\n        const userRef = yield call(createUserProfileDocument,user);\r\n        const userSnapshot = yield call(getDoc, userRef);\r\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield signInWithEmailAndPassword(auth, email, password);\r\n        const userRef = yield call(createUserProfileDocument,user);\r\n        const userSnapshot = yield call(getDoc, userRef);\r\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth){\r\n            return;\r\n        }\r\n        else {\r\n            const userRef = yield call(createUserProfileDocument,userAuth);\r\n            const userSnapshot = yield call(getDoc, userRef);\r\n            yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n            console.log(userSnapshot.data());\r\n        }\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(isUserAuthenticated)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}